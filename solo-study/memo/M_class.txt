// 클래스 
// 기존 JS 문법은 클래스 표현식이 없어 prototype으로 표현함
    // 함수를 생성자 형태로 선언 다음 상속이 필요한 변수나 함수를 prototype 객체에 할당하는 방법 사용
    // prototype 객체는 new 연산자로 생성되는 객체 안 this 연산자의 함수 및 변수 선언 위치를 참조할 수 있는 요소

// ES5 문법
function Shape(x, y) {
    this.name = 'Shape';
    this.move(x, y);
  }
  // static 타입 선언 예제
  Shape.create = function(x, y) {
    return new Shape(x, y);
  };
  Shape.prototype.move = function(x, y) {
    this.x = x;
    this.y = y;
  };
  Shape.prototype.area = function() {
    return 0;
  };
  
  // 혹은
  Shape.prototype = {
    move: function(x, y) {
      this.x = x;
      this.y = y;
    },
    area: function() {
      return 0;
    },
  };
  
  var s = new Shape(0, 0);
//   new Shape(0,0) -> this 객체에 해당하는 변수 및 함수가 prototype 겍체에 선언된 변수와 함수를 함께 참조
  var s2 = Shape.create(0, 0);
  s.area(); // 0
  
// 클래스의 상속은 prototype 객체의 값을 객체 내장 함수를 사용해 덮어 씌우는 방식 사용
var s = new Shape(0, 0);
var s2 = Shape.create(0, 0);
s.area(); // 0

function Circle(x, y, radius) {
  Shape.call(this, x, y);
  this.name = 'Circle';
  this.radius = radius;
}
Object.assign(Circle.prototype, Shape.prototype, {
  area: function() {
    return this.radius * this.radius;
  },
});

var c = new Circle(0, 0, 10);
c.area(); // 100


// ES6 예제
// ES6는 다중 상속이나 인터페이스는 지원하지 않음
// class 키워드로 클래스를 정의함
class Shape {
    static create(x, y) {
      return new Shape(x, y);
    }
    name = 'Shape';
  
    constructor(x, y) {
      this.move(x, y);
    }
    move(x, y) {
      this.x = x;
      this.y = y;
    }
    area() {
      return 0;
    }
  }
  
  var s = new Shape(0, 0);
  var s1 = Shape.create(0, 0);
  s.area(); // 0

//   간결
class Circle extends Shape {
    constructor(x, y, radius) {
      super(x, y);
      this.radius = radius;
    }
    area() {
      if (this.radius === 0) return super.area();
      return this.radius * this.radius;
    }
  }
  
  var c = new Circle(0, 0, 10);
  c.area(); // 100

